/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.example;


import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpClient.Redirect;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.http.HttpResponse.BodyHandlers;

import io.opentelemetry.context.propagation.ContextPropagators;
import io.opentelemetry.context.propagation.TextMapPropagator;
import io.opentelemetry.api.OpenTelemetry;
import io.opentelemetry.api.baggage.propagation.W3CBaggagePropagator;
import io.opentelemetry.api.trace.Span;
import io.opentelemetry.api.trace.Tracer;
import io.opentelemetry.api.trace.propagation.W3CTraceContextPropagator;
import io.opentelemetry.context.propagation.TextMapSetter;
import io.opentelemetry.context.Context;
import io.opentelemetry.context.Scope;


public class App {


    private static Tracer  getTracer() {

        OpenTelemetry otel = OpenTelemetryConfig.initialize();

        Tracer tracer = otel.getTracer("exampleTracer");
        return tracer;
    }

    public static void main(String[] args) throws Exception {
        String serverEndpoint = System.getenv("SERVER_ENDPOINT");
        if(null == serverEndpoint) {
            throw new IllegalArgumentException("No server endpoint");
        }

        // Get a Tracer instance
        Tracer tracer = getTracer();

        ContextPropagators propagators = ContextPropagators.create(
            TextMapPropagator.composite(
                W3CTraceContextPropagator.getInstance(), W3CBaggagePropagator.getInstance()
            )
        );

        HttpClient client = HttpClient.newBuilder()
            .followRedirects(Redirect.NORMAL)
            .build();
        HttpRequest.Builder reqBuilder = HttpRequest.newBuilder(URI.create(serverEndpoint));

        while(true) {
            Span clientSpan = tracer.spanBuilder("clientSpan").startSpan();
            try(Scope scope = clientSpan.makeCurrent()) {
                propagators.getTextMapPropagator().inject(Context.current(), reqBuilder, new HttpRequestSetter());
                HttpRequest request = reqBuilder.build();
                HttpResponse<String> response = client.send(request, BodyHandlers.ofString());

                System.out.println(response.statusCode());
                System.out.println(response.body());

                Thread.sleep(5000);
            } finally {
                clientSpan.end();
            }
        }
    }

    private static class HttpRequestSetter implements TextMapSetter<HttpRequest.Builder> {
        @Override
        public void set(HttpRequest.Builder builder, String key, String value) {
            if(null == builder) {
                return;
            }
            builder.setHeader(key, value);
        }
    }
}
