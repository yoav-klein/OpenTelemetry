/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;
import io.opentelemetry.api.GlobalOpenTelemetry;
import io.opentelemetry.api.trace.Span;
import io.opentelemetry.api.trace.Tracer;
import io.opentelemetry.api.trace.StatusCode;

import io.opentelemetry.context.Context;
import io.opentelemetry.context.ContextKey;
import io.opentelemetry.context.Scope;

import io.opentelemetry.api.OpenTelemetry;

import java.util.logging.Level;
import java.util.logging.Logger;

public class App {
    
    public static void main(String[] args) {
        tracing2();   
    }

    public static void contexts() {
        ContextKey<String> key1 = ContextKey.named("key1");
        ContextKey<String> key2 = ContextKey.named("key2");

        Context context = Context.current().with(key1, "value1").with(key2, "value2");
        System.out.println(context.get(key1));
        System.out.println(context.get(key2));

        try (Scope scope = context.makeCurrent()) {
            System.out.println("context value: " + Context.current().get(key1));
        }

    }
    
    private static Tracer  getTracer() {

        OpenTelemetryConfig.initialize();

        Tracer tracer = GlobalOpenTelemetry.getTracer("exampleTracer");
        return tracer;
    }
        
    public static void tracing1() {
        // Initialize OpenTelemetry
        
        Tracer tracer = getTracer();
        // Get a Tracer instance

        // Start a new span
        Span span = tracer.spanBuilder("exampleOperation").startSpan();

        try {
    
            // Simulate some work
            System.out.println("Performing a traced operation...");
            Thread.sleep(1650); // Simulated delay

            // Add attributes and events
            span.setAttribute("key", "value");
            span.addEvent("Operation started");
            span.setStatus(StatusCode.ERROR);
        } catch (InterruptedException e) {
            span.recordException(e);
        } finally {
            System.out.println("Ending traced operation..");
            // End the span
            span.end();
           
        }

        try {
            Thread.sleep(1000);
        } catch(Exception e) { System.out.println("Interrupted"); }
    }

    public static void tracing2() {
        
        Tracer tracer = getTracer();

        // Start a root span
        Span span = tracer.spanBuilder("rootSpan").startSpan();
        span.setAttribute("name", "John");
        
        try {
            System.out.println("Performing a traced operation...");
            Thread.sleep(1000);

            // Start a child span 1
            Span childSpan1 = tracer.spanBuilder("childSpan1").setParent(span.storeInContext(Context.current())).startSpan();
            childSpan1.setAttribute("name", "Bob");
            try {
                Thread.sleep(1000);

            } catch (InterruptedException e) {
                span.recordException(e);
            } finally {
                System.out.println("Ending child span");
                childSpan1.end();
            }

             // Start a child span 2
            Span childSpan2 = tracer.spanBuilder("childSpan2").setParent(span.storeInContext(Context.current())).startSpan();
            childSpan2.setAttribute("name", "Dylan");
            try {
                Thread.sleep(1000);

            } catch (InterruptedException e) {
                span.recordException(e);
            } finally {
                System.out.println("Ending child span");
                childSpan2.end();
            }

        } catch (InterruptedException e) {
            span.recordException(e);
        } finally {
            System.out.println("Ending root span");
            span.end();
        }


        try {
            Thread.sleep(1000);
        } catch(Exception e) { System.out.println("Interrupted"); }

    }
}




